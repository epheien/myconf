stty -ixon

# set PATH so it includes user's private bin directories
PATH="$HOME/bin:$HOME/.local/bin:$PATH"

# 256color
if [ -n "$TMUX" ]; then
    export TERM=screen-256color
else
    export TERM=xterm-256color
fi

if [ -n "$ZSH_VERSION" ]; then
    # original
    #PROMPT='${ret_status} %{$fg[cyan]%}%c%{$reset_color%} $(git_prompt_info)'
    #PROMPT="%{$fg[green]%}%n@%{$fg[blue]%}%m%{$reset_color%} ${PROMPT}"
    #PROMPT="%B%{\$fg[red]%}%n@%{\$fg[blue]%}%m%b ${PROMPT}"
    # ret_status="%(?:%{$fg_bold[green]%}➜ :%{$fg_bold[red]%}➜ )"
    PROMPT='%(?:%{$fg_bold[green]%}➜ :%{$fg_bold[red]%}➜ [$?]) %M %{$fg[blue]%}$(date "+%m-%d %H:%M:%S.%3N") '
    PROMPT="$PROMPT"'%{$fg[cyan]%}%c%{$reset_color%} $(git_prompt_info)$ '
    if [ -n "$SSH_TTY" ]; then
        PROMPT='%(?:%{$fg_bold[yellow]%}➜ :%{$fg_bold[red]%}➜ [$?]) %M %{$fg[blue]%}$(date "+%m-%d %H:%M:%S.%3N") '
        PROMPT="$PROMPT"'%{$fg[cyan]%}%c%{$reset_color%} $(git_prompt_info)$ '
    fi
    # enable color support of ls and also add handy aliases
    alias ls='ls --color=auto'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'

    # some more ls aliases
    alias ll='ls -AlhF'
    alias la='ls -A'
    alias l='ls -CF'

    bindkey "^U" backward-kill-line
    # bash compatible ctrl-w
    unset WORDCHARS
    # 禁用历史共享
    unsetopt share_history

    # Uncomment the following line to disable auto-setting terminal title.
    DISABLE_AUTO_TITLE="true"
    # 设置标题栏
    function precmd () {
        print -Pn - '\e]0;%1~\a'
    }
fi

# use vim as MANPAGER
if [ -f "$HOME/.vim/man.vim" ]; then
    export MANPAGER="env MAN_PN=1 vim -u ~/.vim/man.vim --not-a-term -M +MANPAGER -c 'set nonu' -"
fi

# 这是避免 git diff 无输出的时候仍然需要交互的问题, 默认值是: LESS=-R
unset LESS
# 在vim里运行terminal的时候，会有这些多余的环境变量，统统干掉！
unset VIMRUNTIME
unset VIM
unset MYVIMRC

if [ -f "$HOME/.shalias" ]; then
    source "$HOME/.shalias"
fi

alias eng="export LANGUAGE=en_US.UTF-8 LANG=en_US.UTF-8 LC_ALL=en_US.UTF-8"
alias zhong="export LANGUAGE=zh_CN.UTF-8 LANG=zh_CN.UTF-8 LC_ALL=zh_CN.UTF-8"

function findn()
{
    [ $# -eq 0 ] && return 0
    find . -iname "*$1*"
    return $?
}

# fuck 命令
if command -v thefuck &>/dev/null; then
    eval $(thefuck --alias)
fi

# wget https://raw.githubusercontent.com/skywind3000/z.lua/refs/heads/master/z.lua -O ~/bin/z.lua
if [ -e "$HOME/bin/z.lua" ]; then
    if [ -n "$ZSH_VERSION" ]; then
        eval "$(lua ~/bin/z.lua  --init zsh)"
    else
        eval "$(lua ~/bin/z.lua  --init bash)"
    fi
fi

export HOMEBREW_NO_AUTO_UPDATE=true
export TLDR_AUTO_UPDATE_DISABLED=true

# ======================================
# nvm 相关配置
# ======================================
# 让脚本可以直接使用全局的模块
#export NODE_PATH=~/.nvm/versions/node/v10.13.0/lib/node_modules/

function setup_nvm()
{
    echo 'Preparing nvm...'
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" --no-use  # This loads nvm
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
}

function setup_node()
{
    setup_nvm
    nvm use stable
}

# 默认不加载 nvm，只有主动触发 nvm 时才加载
function nvm()
{
    setup_nvm
    nvm "$@"
}

function node()
{
    setup_node
    unset -f node
    /usr/bin/env node "$@"
}

unset -f node
DEFAULT_NODE_VERSION=18.16.1
# Ensure we have a default node version in our PATH at startup
if [ -d "$HOME/.nvm/versions/node/v$DEFAULT_NODE_VERSION/bin" ]; then
    PATH="$HOME/.nvm/versions/node/v$DEFAULT_NODE_VERSION/bin:$PATH"
elif [ -d "$HOME/.nvm/versions/node" ]; then
    output=$(ls -1 "$HOME/.nvm/versions/node" | tail -n1)
    if [[ -n "$output" ]]; then
        PATH="$HOME/.nvm/versions/node/$output/bin:$PATH"
    fi
    unset output
fi
# ======================================

# vi:set et sts=4 ft=sh:
