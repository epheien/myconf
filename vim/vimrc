" ============================================================================
" 基本设定
" ============================================================================

function s:IsWindowsOS() "{{{
    return has("win32") || has("win64")
endfunction
"}}}
function s:IsUnixOS() "{{{
    return has('unix')
endfunction
"}}}

function s:IsLinuxOS() "{{{
    return !s:IsWindowsOS()
endfunction
"}}}

" 用户配置文件所在的目录
if s:IsWindowsOS()
    let s:USERRUNTIME = $HOME . '\vimfiles'
else
    let s:USERRUNTIME = $HOME . '/.vim'
endif

" 关闭 vi 兼容模式，否则无法使用 vim 的大部分扩展功能
set nocompatible
" 让退格键以现代化的方式工作
set backspace=2
" 设置 Vim 内部使用的字符编码
if s:IsWindowsOS()
    set encoding=utf-8
endif

" 禁用菜单栏等，不放在 .gvimrc 以避免启动时晃动
"set guioptions+=M
" 替换了工具栏的 menu.vim
if !has('gui_macvim')
    runtime menu.vim
endif
"set guioptions-=m
set guioptions-=t
set winaltkeys=no

" 交换文件不放到跟编辑的文件同一个目录
set directory-=.

" 自动缩进设置
" 使新行缩进与前一行一样
set autoindent
" 主要是实现自动对齐大括号的缩进
set smartindent
" 打开 cindent，主要体现为函数参数过长时，换行自动缩进
set cindent
set cinoptions+=(0,W8

" 总在 vim 窗口的右下角显示当前光标位置。
"set ruler
" 用 statusline 模拟
"set statusline=%<%f\ %h%m%r%=%-13.(%l,%c%V%)\ %P
set statusline=%<%f\ %h%w%m%r%y[%{&ff}]%([%{&fileencoding}]%)
        \%{GetFmt()}%=%(%l/%L,%c%V%)\ %P
set laststatus=2
function! GetFmt() "{{{
    let l:fmt = getftime(expand("%:p"))
    if l:fmt != -1
        return "[". strftime("%Y-%m-%d %H:%M:%S", l:fmt) . "]"
    else
        return ""
    endif
endfunction
"}}}

" 在 vim 窗口右下角，标尺的右边显示未完成的命令
set showcmd

" 左下角显示当前模式
set showmode

" 语法高亮
syntax on
" 禁用 vim 文件类型的错误
let g:vimsyn_noerror = 1
" 使用增强的 python 语法高亮的所有功能
let g:python_highlight_all = 1
" 禁用很慢的语法
let g:python_slow_sync = 0

" 文件类型的检测
" 为特定的文件类型允许插件文件的载入
" 为特定的文件类型载入缩进文件
filetype plugin indent on


" 禁用响铃
"set noerrorbells
" 禁用闪屏
"set vb t_vb=

" 显示行号
set number

" 设定文件编码类型，彻底解决中文编码问题
let &termencoding=&encoding
set fileencodings=utf-8,gbk,gb18030,utf-16,ucs-bom,cp936

" 设置搜索结果高亮显示
set hlsearch
" 搜索时忽略大小写
set ignorecase
set smartcase
" 在搜索模式时输入时即时显示相应的匹配点。
set incsearch

" 设置不自动备份
set nobackup
" 保留原始文件
"set patchmode=.orig

" 启动对鼠标的支持
set mouse=a

" 第一行设置tab键为4个空格，第二行设置当行之间交错时使用4个空格
"set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab

" 长行不能完全显示时显示当前屏幕能显示的部分，长行不能完全显示时显示 @
set display=lastline

" 上下为跨屏幕一行
noremap <silent> k gk
noremap <silent> j gj

" 自动绕行显示
set wrap
" 按词绕行
"set linebreak
" 回绕行的前导符号
"set showbreak=<-->
" 光标上下需要保留的行数，滚动时用
set scrolloff=3

" 设置鼠标和选择的行为
set selectmode=key
set mousemodel=popup
set keymodel=startsel,stopsel
set selection=inclusive
if s:IsLinuxOS()
    " 修正鼠标右键菜单行为
    noremap <RightMouse> <Nop>
    noremap <RightRelease> <RightMouse>
    noremap! <RightMouse> <Nop>
    noremap! <RightRelease> <RightMouse>
    " 没用的 3、4 连击
    noremap <3-LeftMouse> <Nop>
    noremap! <3-LeftMouse> <Nop>
    noremap <4-LeftMouse> <Nop>
    noremap! <4-LeftMouse> <Nop>
endif
" 我的鼠标的中键坏了，禁用掉这个功能，以免改错文件
noremap <MiddleMouse> <Nop>
noremap <2-MiddleMouse> <Nop>
noremap <3-MiddleMouse> <Nop>
noremap <4-MiddleMouse> <Nop>
inoremap <MiddleMouse> <Nop>
inoremap <2-MiddleMouse> <Nop>
inoremap <3-MiddleMouse> <Nop>
inoremap <4-MiddleMouse> <Nop>

" 全能补全禁止预览
"set completeopt=longest,menu
"set completeopt=menuone,preview
set completeopt=menuone
try
    " 暂时不知道具体到什么版本才支持这个选项
    set completeopt+=noinsert
catch /.*/
endtry
" 补全窗口不用太大, 限制之
set pumheight=5

" 显示水平滚动条
"set guioptions+=b

" 修改<Leader>键
"let mapleader = "\\"
let mapleader = "\<F12>"

" 代码自动折叠设置
set foldenable     " 打开代码折叠
"set nofoldenable   " 关闭代码折叠
" 代码折叠，根据语法
"set foldmethod=syntax
" 代码折叠，手动
set foldmethod=manual
" 显示折叠列
if has('gui_running')
    autocmd syntax vim setlocal foldcolumn=1
    autocmd syntax c,cpp setlocal foldcolumn=1
endif
" 设置折叠级别: 高于此级别的折叠会被关闭
set foldlevel=9999

" 允许光标移动到刚刚超过行尾字符之后的位置
set virtualedit=onemore,block

" 标签页显示。0:1:2 = 总是不显示:超过一个才显示:总是显示
"set showtabline=2

" 自动完成扫描的文件
" 缺省 ".,w,b,u,t,i"
" 当前缓冲区，其他窗口的buf，其他载入的buf，卸载的buf，标签，头文件
"set complete=.,w,b,u,t,i
"set complete=.,t,i
set complete=.,t,w,b,k

" 注意: 打开次选项会使得某些插件无法工作。
"set autochdir

" 切换时隐藏缓冲而不是提示已修改未保存
set hidden

" 显示 80 字符右边距的实现，需要 7.3 以上版本
if version >= 703
    set cc=81
endif

" 设置 session 文件保存的信息
" (缺省: "blank,buffers,curdir,folds,help,options,tabpages,winsize")
set sessionoptions=buffers,curdir,folds,help,localoptions,tabpages,winsize,resize

" 普通模式和插入模式的光标设置
let color_normal = 'grey'
let color_insert = 'magenta'
let color_exit = 'grey'
if &term == "linux" || &term == "fbterm" "{{{
    " console fbterm 通用
    let g:loaded_vimcdoc = 0
    set t_ve+=[?6c
    autocmd! InsertEnter * set t_ve-=[?6c
    autocmd! InsertLeave * set t_ve+=[?6c
    autocmd! VimLeave * set t_ve-=[?6c
"elseif &term == "xterm"
    " konsole
    "let &t_EI = "\<Esc>]50;CursorShape=0\x7"
    "let &t_SI = "\<Esc>]50;CursorShape=1\x7"
elseif &term == "xterm-256color"
    " gnome-terminal xterm 通用
    let &t_EI = "\<Esc>]12;" . color_normal . "\x7" " 普通模式的光标颜色
    let &t_SI = "\<Esc>]12;" . color_insert . "\x7" " 插入模式的光标颜色
elseif &term =~ "screen"
    set ttymouse=xterm2
    if exists('$TMUX')
        " tmux
        exec 'silent !echo -ne "\033Ptmux;\033\e]12;"'
                    \ . shellescape(color_normal, 1) . '"\007\033\\"'
        let &t_SI="\033Ptmux;\033\e]12;" . color_insert . "\007\033\\"
        let &t_EI="\033Ptmux;\033\e]12;" . color_normal . "\007\033\\"
        exec 'autocmd VimLeave * :silent !echo -ne "\033Ptmux;\033\e]12;"'
                    \ . shellescape(color_exit, 1) . '"\007\033\\"'
    else
        " screen
        exec 'silent !echo -ne "\033P\e]12;"'
                    \ . shellescape(color_normal, 1) . '"\007\033\\"'
        let &t_SI="\033P\e]12;" . color_insert . "\007\033\\"
        let &t_EI="\033P\e]12;" . color_normal . "\007\033\\"
        exec 'autocmd VimLeave * :silent !echo -ne "\033P\e]12;"'
                    \ . shellescape(color_exit, 1) . '"\007\033\\"'
    endif
elseif &term =~ 'xterm.\+'
    " xterm
    " 0 or 1 -> blinking block
    " 2 -> solid block
    " 3 -> blinking underscore
    " 4 -> solid underscore
    let &t_EI = "\<Esc>[0 q"
    let &t_SI = "\<Esc>[3 q"
endif
unlet color_normal
unlet color_insert
unlet color_exit
"}}}

" 编辑 po 文件时与中文输入法的配合
"autocmd! syntax po set imactivatekey=C-space

" 颜色方案
if has('gui_running')   " gui 的情况下
    colorscheme desertEx
elseif &t_Co == 256     " 支持 256 色的话
    colorscheme desertEx256
elseif $TERM ==# "xterm"
    colorscheme default
else
    colorscheme default
endif

" 增强的命令行补全
set wildmenu

" 执行宏、寄存器和其它不通过输入的命令时屏幕不会重画
"set lazyredraw

" 设置键码延时, 避免终端下 <ESC> 的等待
set ttimeoutlen=50

" 用空格来显示制表并同时把光标放在空白开始位置
set list listchars=tab:\ \ 

" 删除环境变量 LANGUAGE，不然会影响某些插件无法提取英文环境下的命令输出
let $LANGUAGE=''

" Man
runtime ftplugin/man.vim

" 摘录自vimrc sample by Bram
" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).
" Also don't do it when the mark is in the first line, that is the default
" position when opening a file.
augroup Epheien
    autocmd BufReadPost *
        \ if line("'\"") > 1 && line("'\"") <= line("$") |
        \     exe "normal! g`\"" |
        \ endif
augroup End

" ============================================================================
" 额外的文件格式支持
" ============================================================================

" shell 文件格式语法类型默认为 bash
let g:is_bash = 1

" ========== 特殊文件格式 ==========
" txt2tags 格式文件高亮
autocmd! BufNewFile,BufRead *.t2t set ft=txt2tags
"asciidoc 格式文件高亮
autocmd! BufNewFile,BufRead *.adc set ft=asciidoc
" vimhelp(自定义) 格式文件高亮
"autocmd! BufNewFile,BufRead *.vhp set tw=78 ts=4 ft=help norl
" Org-Mode
"autocmd BufEnter *.org call org#SetOrgFileType()
autocmd! BufNewFile,BufRead *.org set ft=org
" NetWide Assembly
autocmd! BufNewFile,BufRead *.nasm setf nasm
" rfc
autocmd! BufNewFile,BufRead *.txt
        \ if expand('%:t') =~# 'rfc\d\+\.txt' | setf rfc | endif

" ============================================================================
" 常规键盘映射
" ============================================================================

" ======================================
" 普通模式
" ======================================
function! s:n_BufferDelete() "{{{
    let curb = bufnr('%')
    bNext
    exec "bd " . curb
    if exists("*BufExplorer_Fix")
        call BufExplorer_Fix()
    endif
endfunction
"}}}
nnoremap <silent> \- :set columns-=30<CR>
nnoremap <silent> \= :set columns+=30<CR>
nnoremap <silent> \l :%s/\r//g<CR>
nnoremap <silent> \d :call <SID>n_BufferDelete()<CR>
nnoremap \h :cd %:p:h <Bar> pwd<CR>
nnoremap \] :mksession! vimp.vim <Bar> wviminfo! vimp.vi<CR>
nnoremap <Space> 3<C-e>
nnoremap <S-Space> 3<C-y>
nnoremap , 3<C-y>
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
if exists(':tmap')
    function s:tbs()
        call term_sendkeys(bufnr('%'), "\<C-w>")
    endfunction
    tnoremap <C-\>: <C-w>:
    tnoremap <C-h> <C-w>h
    tnoremap <C-j> <C-w>j
    tnoremap <C-k> <C-w>k
    tnoremap <C-l> <C-w>l
    tnoremap <C-v> <C-w>"+
    tnoremap <silent> <C-BS> <C-w>:call <SID>tbs()<CR>
    tnoremap <silent> <C-w> <C-w>:call <SID>tbs()<CR>
endif
nnoremap ; :
"nnoremap <C-a> ggVG
nnoremap <C-Tab> :bnext<CR>
nnoremap <S-Tab> :bNext<CR>
" stty -ixon
nnoremap <silent> <C-s> :update<CR>
"nnoremap <CR> <C-w>}
nnoremap <C-p> <C-w>z
nnoremap T :tag<CR>
"nnoremap <C-z> u
if has('gui_running')
    nnoremap <C-v> "+gP
endif

" 交换 ' 和 `，因为 ` 比 ' 常用但太远
nnoremap ' `
nnoremap ` '

"=======================================
" 命令行模式，包括搜索时
"=======================================
cnoremap <C-h> <Left>
cnoremap <C-j> <Down>
cnoremap <C-k> <Up>
cnoremap <C-l> <Right>
cnoremap <C-b> <Left>
cnoremap <C-f> <Right>
cnoremap <C-a> <Home>
cnoremap <C-BS> <C-w>
cnoremap <C-d> <Del>
if has('gui_running')
    cnoremap <C-v> <C-r>+
endif

"=======================================
" 可视和选择模式
"=======================================
if has('gui_running')
    vnoremap <C-x> "+x
    vnoremap <C-c> "+y
    vnoremap <C-v> "+gP
endif
vnoremap <silent> <C-s> <C-c>:update<CR>
"vnoremap y "+y
"vnoremap x "+x

"=======================================
" 可视模式
"=======================================
function! MacroComment() "{{{
    let l:firstline = line("'<")
    let l:lastline = line("'>")
    let l:curline = line(".")
    exec l:firstline . "put! ='#if 0'"
    exec l:lastline + 1 . "put ='#endif'"
    exec l:curline + 1
endfunction
"}}}
xnoremap <Space> 3j
xnoremap , 3k
xnoremap ( di()<ESC>Pl
xnoremap [ di[]<ESC>Pl
xnoremap ' di''<ESC>Pl
xnoremap " di""<ESC>Pl

" 选择后立即搜索
xnoremap / y:let @" = substitute(@", '\\', '\\\\', "g")<CR>
    \:let @" = substitute(@", '\/', '\\\/', "g")<CR>/\V<C-r>"<CR>N
" C 文件的 #if 0 段落注释
xnoremap 0 <C-c>:call MacroComment()<CR>


" ======================================
" 插入模式下
" ======================================
function! s:ToggleCase() "{{{
    let sLine = getline('.')
    let nEndIdx = col('.') - 2
    let sWord = matchstr(sLine[: nEndIdx], '\zs\k*\ze$')
    if sWord ==# ''
        return ''
    endif

    if sWord =~# '[a-z]'
        call setline(line('.'), substitute(sLine[: nEndIdx], '\zs\k*\ze$', 
                    \   toupper(sWord), '') . sLine[nEndIdx+1 :])
    else
        call setline(line('.'), substitute(sLine[: nEndIdx], '\zs\k*\ze$', 
                    \   tolower(sWord), '') . sLine[nEndIdx+1 :])
    endif

    return ''
endfunction
"}}}
"inoremap <silent> <C-s> <C-o>:update<CR>
inoremap <silent> <C-s> <ESC>:update<CR>
inoremap <C-CR> <ESC>o
inoremap <C-o> <End><CR>
inoremap <S-CR> <ESC>O
inoremap <expr> <C-e> pumvisible()?"\<C-e>":"\<End>"
inoremap <C-a> <Home>
inoremap <C-BS> <C-w>
inoremap <C-d> <Del>
if has('gui_running')
    inoremap <C-v> <C-r>+
endif

"inoremap <C-z> <C-o>u
"inoremap <C-r> <C-o><C-r>
" 写 C 时麻烦的宏定义大写问题，解决！
inoremap <silent> <expr> <C-y>
        \ pumvisible()?"\<C-y>":"\<C-r>=<SID>ToggleCase()\<CR>"

imap <C-h> <Left>
imap <C-j> <Down>
imap <C-k> <Up>
imap <C-l> <Right>
imap <C-b> <Left>
imap <C-f> <Right>
imap <C-p> <Up>
imap <C-n> <Down>
inoremap <A-h> <C-Left>
inoremap <A-l> <C-Right>

" ============================================================================
" 插件设置
" ============================================================================
" ========== pathogen ==========
"{{{
call pathogen#infect()
"}}}
" ========== matchparen ==========
"{{{
let matchparen_noinsert = 1
"}}}
" ========== tagbar ==========
"{{{
let g:tagbar_compact = 1
let g:tagbar_width = 30
let g:tagbar_sort = 0
"let g:tagbar_expand = 1
if has("win32") || has("win64")
    if !executable('ctags')
        let g:tagbar_ctags_bin = $VIM . '\vimfiles\bin\ctags.exe'
    endif
endif

let g:tagbar_type_rfc = {
    \ 'ctagstype' : 'rfc',
    \ 'kinds'     : [
        \ 'c:chapters',
    \ ],
    \ 'sort'    : 0,
    \ 'deffile' : s:USERRUNTIME . '/ctags/rfc.cnf',
\ }

let g:tagbar_type_autoit = {
    \ 'ctagstype' : 'autoit',
    \ 'kinds'     : [
        \ 'f:functions',
    \ ],
    \ 'sort'    : 0,
    \ 'deffile' : s:USERRUNTIME . '/ctags/autoit.cnf',
\ }

let g:tagbar_type_cpp = {
    \ 'ctagstype' : 'c++',
    \ 'kinds'     : [
        \ 'd:macros:0',
        \ 'p:prototypes:1',
        \ 'g:enums',
        \ 'e:enumerators',
        \ 't:typedefs',
        \ 'n:namespaces',
        \ 'c:classes',
        \ 's:structs',
        \ 'u:unions',
        \ 'f:functions',
        \ 'm:members',
        \ 'v:variables'
    \ ],
    \ 'sro'        : '::',
    \ 'kind2scope' : {
        \ 'g' : 'enum',
        \ 'n' : 'namespace',
        \ 'c' : 'class',
        \ 's' : 'struct',
        \ 'u' : 'union'
    \ },
    \ 'scope2kind' : {
        \ 'enum'      : 'g',
        \ 'namespace' : 'n',
        \ 'class'     : 'c',
        \ 'struct'    : 's',
        \ 'union'     : 'u'
    \ }
\ }

nnoremap <Leader>t :TagbarToggle<CR>

hi TagbarAccessProtected guifg=Magenta ctermfg=Magenta
hi link TagbarSignature Normal
hi link TagbarKind Constant
"}}}
" ========== NERDTree ==========
"{{{
" 设置不显示的文件，效果为仅显示 .c,.cpp,.h 文件，无后缀名文件暂时无法解决
"let NERDTreeIgnore = ['\(\.cpp$\|\.c$\|\.h$\|\.cxx\|\.hpp\)\@!\..\+', '\~$']
let NERDTreeIgnore = []
let NERDTreeMapMenu = "mm"
hi link treeDir Statement
hi link treeCWD Type
"}}}
" ========== Vimwiki ==========
"{{{
let g:vimwiki_camel_case = 0
" 令预格式化文本支持语法高亮，同时可以强制刷新预格式化文本
let wiki = {}
let wiki.path = '~/my_wiki/'
let wiki.path_html = '~/my_html/'
let wiki.nested_syntaxes = {'c++': 'cpp', 'python': 'python', 'sh': 'sh'}
let g:vimwiki_list = [wiki]
let g:vimwiki_hl_cb_checked = 1
let g:vimwiki_CJK_length = 1
let g:vimwiki_browsers=['/usr/bin/firefox']
let g:vimwiki_html_header_numbering = 2
let g:vimwiki_menu = ''
let g:vimwiki_table_auto_fmt = 0
" 禁用插入模式的表格快捷键，以防占用 <Cr> 和 <Tab>
let g:vimwiki_table_mappings = 0

" 一些特定的设置
autocmd! FileType vimwiki call <SID>VimwikiSetup()
"autocmd! BufWritePre * call <SID>VimwikiPost()
function! s:VimwikiSetup()
    " 这个动作默认按键是 <C-Space>，太搓了，而 <C-n> 又被 NERD commenter 占用
    nmap <buffer> <C-n> <Plug>VimwikiToggleListItem
    setlocal sts=4 ts=4 sw=4 et
    " 解决不删除空白行缩进的问题
    setlocal nocindent
endfunction
function! s:VimwikiPost()
    %s/^\s\+$//
endfunction
"}}}
" ========== NERD commenter ==========
"{{{
let NERDMenuMode = 0
"let NERDSpaceDelims = 1
nmap <C-n> <Leader>c<space><Down>
xmap <C-n> <Leader>c<space>
"}}}
" ========== pydiction ==========
"{{{
let g:pydiction_location = s:USERRUNTIME . '/dict/complete-dict'
"let g:pydiction_menu_height = 20
"}}}
" ========== videm ==========
"{{{
" 基于 VLWorkspace 的源/头文件切换
nnoremap <silent> <C-\>a :VSwapSourceHeader<CR>

" 修正 clang++ 的头文件搜索路径的问题
command! -nargs=0 VIMCCCFixup call s:VIMCCCFixup()
function! s:VIMCCCFixup() "{{{2
    let output = system("echo '' | gcc -v -x c++ -fsyntax-only - |& sed -n '/^#include /,/^End of/p' | grep '^ ' | cut -c 2-")
    let li = split(output, '\n')
    call map(li, '"-I" . v:val')
    let args = join(li, ' ')
    echo 'VIMCCCAppendArgs' args
    exec 'VIMCCCAppendArgs' args
endfunction
"}}}

" pyclewn 的终端窗口高度，暂时这样设置
set previewheight=8

let g:videm_user_options = {
    \ '.videm.Compatible'                   : 0,
    \ '.videm.wsp.ShowBriefHelp'            : 0,
    \ '.videm.wsp.keybind.PopupMenu'        : '<RightRelease>',
    \ '.videm.wsp.LinkToEditor'             : 0,
    \ '.videm.wsp.SaveBeforeBuild'          : 1,
    \
    \ '.videm.common.calltips.IndicateArgument' : 0,
    \ '.videm.common.calltips.EnableSyntaxTest' : 0,
    \
    \ '.videm.cc.omnicpp.UseLibCxxParser'       : 1,
    \ '.videm.cc.omnicpp.InclAllCondCmplBrch'   : 1,
    \
    \ '.videm.dbg.pyclewn.DisableNeedlessTools' : 0,
    \ '.videm.dbg.pyclewn.SaveBpInfo'           : 0,
\ }
"let g:videm_user_options['.videm.wsp.AutoSession'] = 1
let g:videm_user_options['.videm.cc.omnicpp.ItemSelectMode'] = 2
let g:videm_user_options['.videm.symdb.Current'] = "gtags"
let g:videm_user_options['.videm.cc.Current'] = ""
"if s:IsUnixOS()
    "let g:videm_user_options['.videm.cc.Current'] = "vimccc"
"endif
"}}}
" ========== xptemplate ==========
"{{{
" 选择模式下取消 j, k 原始的行为
snoremap j <C-g>cj
snoremap k <C-g>ck

if has('gui_running')
    "let g:xptemplate_nav_next = '<C-CR>'
    "let g:xptemplate_nav_prev = '<S-CR>'
    let g:xptemplate_nav_next = '<C-o>'
    let g:xptemplate_nav_prev = '<S-Tab>'
else
    let g:xptemplate_nav_next = '<C-o>'
    let g:xptemplate_nav_prev = '<S-Tab>'
endif
let g:xptemplate_nav_cancel = '<C-c>'
let g:xptemplate_key = '<C-\>'
"inoremap <silent> <expr> <C-p> pumvisible() ? "\<C-p>" :
            "\"\<C-r>=XPTemplateStart(0,{'k':'<C-p++'})\<CR>"
"}}}
" ========== mark ==========
"{{{
function! s:MouseMark() "{{{2
    if &ft == "help"
        execute "normal! \<C-]>"
        return
    endif
    let c = getline('.')[col('.')-1]
    if c == '(' || c == ')' || c == '[' || c == ']' || c == '{' || c == '}'
            \   || &buftype ==# 'quickfix'
        execute "normal! \<2-LeftMouse>"
        return
    endif
    exec "normal \<Plug>MarkSet"
endfunction
"}}}2
let g:mwIgnoreCase = 0
let g:mwHistAdd = ''
" 'extended' 的话, 颜色不是太好看
"let g:mwDefaultHighlightingPalette = 'extended'
nmap <silent> \\ <Plug>MarkSet
xmap <silent> \\ <Plug>MarkSet
nmap <silent> \c :noh<CR><Plug>MarkAllClear
nmap <silent> * <Plug>MarkSearchCurrentNext
nmap <silent> # <Plug>MarkSearchCurrentPrev
nmap <silent> <Leader>* <Plug>MarkSearchNext
nmap <silent> <Leader># <Plug>MarkSearchPrev
nnoremap <silent> <2-LeftMouse> :call <SID>MouseMark()<CR>
"}}}
" ========== vim-signature ==========
"{{{
" yz 留给 xptemplate 用，暂时没办法
"let g:SignatureIncludeMarks =
            "\ 'abcdefghijklmnopqrstuvwxABCDEFGHIJKLMNOPQRSTUVWXYZ'
let g:SignatureMap = {
  \ 'PlaceNextMark'      :  "m,",
  \ 'PurgeMarks'         :  "m<Space>",
  \ 'GotoNextSpotByPos'  :  "<F2>",
  \ 'GotoPrevSpotByPos'  :  "<S-F2>",
  \ 'ListBufferMarks'    :  "m/",
  \ }
"}}}
" ========== ex-gsearch ==========
"{{{
highlight link exConfirmLine IncSearch
highlight link exTargetLine IncSearch
nnoremap <C-\>w :GSW <C-R>=fnameescape(expand("<cword>"))<CR><CR>
"}}}
" ============================================================================
" IDE 设置
" ============================================================================
let g:c_kernel_mode = 1

command -nargs=0 CKernelMode setlocal ts=8 sts=0 sw=8 noet
command -nargs=0 CSpaceMode setlocal ts=8 sts=4 sw=4 et
command -nargs=0 CTS4ETMode setlocal ts=4 sts=4 sw=4 et
command -nargs=0 CSangforMode setlocal ts=4 sts=4 sw=4 noet
" 清理后置的多余的空白
command -nargs=0 CleanSpaces silent! %s/\s\+$//g | normal! ``

" ### Mark.vim 快速高亮单词。
" 自定义高亮，默认有 6 组
highlight HiWord1 gui=bold guifg=yellow guibg=#445599
        \ cterm=NONE ctermfg=black ctermbg=yellow
highlight HiWord2 gui=bold guifg=white guibg=#445599
        \ cterm=NONE ctermfg=black ctermbg=white
highlight HiWord3 gui=bold guifg=orange guibg=#445599
        \ cterm=NONE ctermfg=black ctermbg=Magenta
highlight HiWord4 gui=bold guifg=green guibg=#445599
        \ cterm=NONE ctermfg=black ctermbg=green
highlight HiWord5 gui=bold guifg=cyan guibg=#445599
        \ cterm=NONE ctermfg=black ctermbg=cyan
highlight HiWord6 gui=bold guifg=salmon guibg=#445599
        \ cterm=NONE ctermfg=black ctermbg=red
highlight HiWord7 gui=bold guifg=olivedrab3 guibg=#445599
        \ cterm=NONE ctermfg=black ctermbg=blue

" 括号自动补全. 为了性能, 直接禁用闭合检查
inoremap ( ()<Left>
inoremap [ []<Left>
inoremap <expr> " (&filetype == "vim") ? "\"" : "\"\"\<Left>"
inoremap <expr> ' (0) ? "'" : "''\<Left>"

inoremap <expr> <BS> <SID>i_BS_plus()
inoremap <expr> ; <SID>i_Semicolon_plus()
inoremap <C-g> <C-r>=<SID>i_InsertHGuard()<CR>

" 补全模式下的映射
"inoremap <expr> <CR> pumvisible()?"\<C-y>":"\<CR>"
"inoremap <expr> <ESC> pumvisible()?"\<C-e>":"\<ESC>"

function! s:i_InsertHGuard() "{{{
    let gudname = "__".substitute(toupper(expand("%:t")), "\\.", "_", "g")."__"
    return "#ifndef ".gudname."\<CR>"."#define ".gudname."\<CR>\<CR>\<CR>\<CR>\<CR>\<CR>"."#endif /* ".gudname." */\<Up>\<Up>\<Up>"
endfunction
"}}}
function! s:i_Tab_plus_old() "{{{
    if (&filetype == "c" || &filetype == "cpp") && !pumvisible()
        return "\<Tab>"
    elseif !pumvisible()
        return "\<C-x>\<C-n>"
    elseif pumvisible()
        return "\<C-n>"
    endif
endfunction
"}}}
function! s:i_Semicolon_plus() "{{{
    let sLine = getline('.')
    if sLine !~# '^\s*for\>' && sLine[col('.') - 1] ==# ')'
        return "\<Right>;"
    else
        return ";"
    endif
endfunction
"}}}
function! IfPair(char1,char2) "{{{
    if getline('.')[col('.') - 2] == a:char1 && getline('.')[col('.') - 1] == a:char2
        return 1
    else
        return 0
    endif
endfunction
"}}}
function! s:i_BS_plus() "{{{
    if IfPair('(',')') || IfPair('[',']') || IfPair('{', '}')
        return "\<DEL>\<BS>"
    else
        return "\<BS>"
    endif
endfunction
"}}}

" ========== cscope 设置 ==========
"{{{
function! s:CscopeAdd(name) "{{{
    let prepath = fnamemodify(a:name, ':p:h')
    if a:name ==# 'GTAGS' && &cscopeprg !~# '\<gtags-cscope\>'
        silent cscope kill -1
        set cscopeprg=gtags-cscope
        redraw
    elseif a:name =~? 'cscope' && &cscopeprg =~# 'gtags'
        silent cscope kill -1
        if executable('cscope')
            set cscopeprg=cscope
        elseif s:IsWindowsOS()
            let &cscopeprg = $VIM . '\vimfiles\bin\cscope.exe'
        endif
        redraw
    endif
    exec printf('cscope add %s %s', fnameescape(a:name), fnameescape(prepath))
    autocmd! BufWritePost * call <SID>UpdateGtags(expand('%:p'))
endfunction
"}}}
command! -complete=file -nargs=1 CsAdd :call <SID>CscopeAdd("<args>")

function! s:UpdateGtags(filename) "{{{
    if !cscope_connection(1, 'GTAGS')
        return
    endif
    " "cd %s && %s -f %s --single-update %s"
    let prg = exepath(substitute(&cscopeprg, '-cscope\>', '', ''))
    let cmd = [prg, '--single-update', a:filename]
    let job = job_start(cmd)
endfunction
"}}}

if has("cscope")
    if executable('cscope')
        set cscopeprg=cscope
    elseif s:IsWindowsOS()
        let &cscopeprg = $VIM . '\vimfiles\bin\cscope.exe'
    endif
    " add any database in current directory
    if filereadable('cscope.out')
        call s:CscopeAdd('cscope.out')
    " else add database pointed to by environment
    elseif $CSCOPE_DB != ""
        call s:CscopeAdd($CSCOPE_DB)
    " support gtags
    "elseif filereadable("GTAGS") " 使用 gtags
        "set csprg=gtags-cscope
        "call s:CscopeAdd('GTAGS')
    endif
    set cscopeverbose
    set cscopetagorder=0
    set cscopetag
    set cscopequickfix=s-,c-,d-,i-,t-,e-
endif

nnoremap <C-\>s :cs find s <C-R>=fnameescape(expand("<cword>"))<CR><CR>
nnoremap <C-\>g :cs find g <C-R>=fnameescape(expand("<cword>"))<CR><CR>
nnoremap <C-\>c :cs find c <C-R>=fnameescape(expand("<cword>"))<CR><CR>
nnoremap <C-\>t :cs find t <C-R>=fnameescape(expand("<cword>"))<CR><CR>
nnoremap <C-\>e :cs find e <C-R>=fnameescape(expand("<cword>"))<CR><CR>
nnoremap <C-\>f :cs find f <C-R>=fnameescape(expand("<cfile>"))<CR><CR>
nnoremap <C-\>i :cs find i ^<C-R>=fnameescape(expand("<cfile>"))<CR>$<CR>
nnoremap <C-\>d :cs find d <C-R>=fnameescape(expand("<cword>"))<CR><CR>

"nnoremap <silent> <C-\>a :call <SID>AlterSource()<CR>
function! s:AlterSource() "{{{
    let l:file = expand("%:t:r")
    let l:ext = expand("%:t:e")
    if l:ext == "c" || l:ext == "cpp"
        try
            exec 'cs find f \<' . l:file . ".h$"
        catch
            try
                exec 'cs find f \<' . l:file . ".hpp$"
            catch
                return
            endtry
            return
        endtry
    elseif l:ext == "h" || l:ext == "hpp"
        try
            exec 'cs find f \<' . l:file . ".c$"
        catch
            try
                exec 'cs find f \<' . l:file . ".cpp$"
            catch
                return
            endtry
            return
        endtry
    endif
endfunction
"}}}
"}}}

" ## vim-plug
call plug#begin('~/.vim/plugged')

Plug 'junegunn/vim-plug'

" deoplete (pip3 install -U neovim/pynvim)
"Plug 'Shougo/deoplete.nvim', {'tag': '4.1'}
" NOTE: 实测，这个版本补全菜单弹出速度比较快
Plug 'Shougo/deoplete.nvim', {'commit': 'afd92a94bce51eb2bf83bdcab4b90acd6af44101'}
Plug 'roxma/nvim-yarp', {'commit': '5443ac06b3989baa9262adec810503e0234c316e'}
Plug 'roxma/vim-hug-neovim-rpc', {'commit': 'a18bf1ca99526a6f2140c5699ef25b4b18d5ba06'}

" 增强的 js 语法高亮
Plug 'othree/yajs.vim'

Plug 'posva/vim-vue'

Plug 'asins/vim-dict'

Plug 'tpope/vim-surround'

Plug 'Yggdroot/LeaderF'

Plug 'mbbill/undotree'

Plug 'iamcco/markdown-preview.vim'

call plug#end()
" ####

let g:deoplete#sources#ternjs#tern_bin = expand('~/.nvm/versions/node/v10.13.0/bin/tern')

" ==========================================================
" 自己的简易插件
" ==========================================================
" ========== SimpleSuperTab ==========
"{{{
" 需要把 completeopt 设置为 menuone
inoremap <C-Tab> <Tab>
inoremap <silent> <Tab> <C-r>=<SID>i_Tab_plus()<CR>
inoremap <silent> <expr> <S-Tab> pumvisible()?"\<C-p>":"\<C-d>"

function! s:i_Tab_plus() "{{{2
    let preChar = getline('.')[col('.') - 2]
    if pumvisible()
        return "\<C-n>"
    elseif preChar == '' || preChar =~ '\s'
        return "\<Tab>"
    elseif (getline('.')[col('.') - 3] == '-' && preChar == '>') || preChar == '.'
        return "\<C-x>\<C-o>"
    elseif &ft ==# 'c' || &ft ==# 'cpp'
        return "\<C-n>"
    else
        return "\<C-x>\<C-n>"
    endif
endfunction
"}}}2
function! I_OnPopupPost() "{{{2
    return pumvisible()?"\<C-p>\<Down>":""
endfunction
"}}}2
"}}}
" ========== 在预览窗口显示标签内容 ==========
"{{{
nnoremap <silent> <CR> :call PreviewWord()<CR>
function! PreviewWord() "{{{2
    " quickfix窗口和命令窗口不映射
    if &ft ==# 'qf' ||
            \ (bufname('%') ==# '[Command Line]' && &buftype ==# 'nofile')
        exec "normal! \<CR>"
        return
    endif

    if &previewwindow
        let flag = 1
    else
        let flag = 0
    endif

    let orgbuf = bufnr('%')
    let w = expand("<cword>")       " 在当前光标位置抓词
    if w =~ '\a'                    " 如果该单词包括一个字母
        let l:bak_shm = &shm
        let l:bak_ei = &ei
        set eventignore+=BufEnter,WinEnter,BufWinEnter "TODO: 需要更好的方案
        set shortmess+=A

        if &filetype == "help"
            exec "normal! \<C-w>}"
        else
            try
                exec "ptag " . w
            catch
                let &shm = l:bak_shm
                let &ei = l:bak_ei
                return
            endtry
        endif

        let &shm = l:bak_shm
        let &ei = l:bak_ei

        let orgWinnr = winnr()

        " 跳转至预览窗口
        try
            noautocmd wincmd P
        catch /.*/
            return
        endtry
        if &previewwindow           " 如果确实转到了预览窗口……

"           if !buflisted(orgbuf)   " 如果需要打开的预览缓冲没有在可用缓冲列表
"               setlocal buftype=nowrite
"               setlocal bufhidden=delete
"               setlocal noswapfile
"               setlocal nobuflisted
"               setlocal noma
"           endif

            if has("folding")
                silent! .foldopen   " 展开折叠的行
            endif

"           call search("$", "b")   " 到前一行的行尾
            let w = substitute(w, '\\', '\\\\', "")
"           call search('\<\V' . w . '\>')      " 定位光标在匹配的单词上
            call search('\<\V' . w . '\>', "c") " 定位光标在匹配的单词上
            " 给在此位置的单词加上匹配高亮
            "hi PreviewWord guifg=cyan guibg=grey40 term=bold ctermbg=green
            hi link PreviewWord Search
            exec 'match PreviewWord "\%' . line(".") . 'l\%' . col(".") . 'c\k*"'
            normal! zz

            if flag == 0
                " 返回原来的窗口
                exec 'noautocmd' orgWinnr 'wincmd w'
            endif
        endif
    endif
endfunction
"}}}2
"}}}
" ========== 取色器，配合 colorsel 使用 ==========
"{{{
"nnoremap <Leader>c :execute "ColorSel " . <SID>PickColor2Colorsel()<CR>
function! s:PickColor2Colorsel() "{{{2
    if !exists("$DISPLAY") || !executable("colorpicker")
        return ""
    endif
    let l:color = substitute(system("colorpicker"), '\n', '', '')
    return l:color
endfunction
"}}}2
"}}}
" ========== 隐藏混乱的文件格式中的 ^M 字符 ==========
"{{{
autocmd BufReadPost * nested call <SID>FixDosFmt()
function! s:FixDosFmt() "{{{2
    if &ff == 'unix' && !&bin
        " 搜索 ^M
        let nStopLine = 0
        let nTimeOut = 100
        let nRet = search('\r$', 'nc', nStopLine, nTimeOut)
        if nRet > 0
            e ++ff=dos
            "redraw
            "echo 'File format has been set to UNIX.'
        endif
    endif
endfunction
"}}}2
"}}}
" ========== deoplete ==========
"{{{
" 摘录自 neocomplcache
function! s:_indent_current_line() abort
    let pos = getpos('.')
    let len = len(getline('.'))
    let equalprg = &l:equalprg
    try
        setlocal equalprg=
        silent normal! ==
    finally
        let &l:equalprg = equalprg
        let pos[2] += len(getline('.')) - len
        call setpos('.', pos)
    endtry
    return ''
endfunction

function! s:indent_current_line() abort
    if &ft != 'html'
        return ''
    endif
    " indent line matched by indentkeys
    for word in filter(map(split(&l:indentkeys, ','),
            \ "v:val =~ '^<.*>$' ? matchstr(v:val, '^<\\zs.*\\ze>$')
            \                  : matchstr(v:val, ':\\|e\\|=\\zs.*')"),
            \ "v:val != ''")

        if word ==# 'e'
            let word = 'else'
        endif

        call s:_indent_current_line()
        break
    endfor
    return ''
endfunction

function! s:my_cr_function()
    if pumvisible()
        return "\<C-y>\<C-r>=<SID>indent_current_line()\<CR>"
    else
        return "\<CR>"
    endif
endfunction

" NOTE: 修正 html 补全后不能自动缩进的问题
inoremap <silent> <expr> <CR> pumvisible() ? "\<C-y>\<C-r>=<SID>indent_current_line()\<CR>" : "\<CR>"

if !s:IsWindowsOS() && has('python3')
    let g:deoplete#enable_at_startup = 1
    "let g:deoplete#on_insert_enter = v:false
    call deoplete#custom#option({
    \   'on_insert_enter': v:false,
    \ })
    " Q: I don't want to see the typed word in the completion menu.
    "call deoplete#custom#source('_', 'matchers',
    "\   ['matcher_fuzzy', 'matcher_length'])
endif
"}}}
" ========== nvim-complete-manager ==========
"{{{
"let g:cm_smart_enable = 0
let g:cm_completeopt = 'menu,menuone,noinsert'
"}}}
" ========== smartim ==========
"{{{
let g:smartim_default = "com.apple.keylayout.ABC"
let g:smartim_saved = 0
"}}}

" ----------------------------------------------------------------------------
" vim: fdm=marker fen fdl=0 expandtab softtabstop=4
